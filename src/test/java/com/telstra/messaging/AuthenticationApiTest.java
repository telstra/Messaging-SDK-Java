/*
 * Messaging API v3.1.0
 * Send and receive SMS & MMS programmatically, leveraging Australia's leading mobile network. With Telstra's Messaging API, we take out the complexity to allow seamless messaging integration into your app, with just a few lines of code. Our REST API is enterprise grade, allowing you to communicate with engaging SMS & MMS messaging in your web and mobile apps in near real-time on a global scale. 
 *
 * OpenAPI spec version: 3.1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.telstra.messaging;

import com.telstra.*;
import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.assertNotNull;


/**
 * API tests for AuthenticationApi
 */
public class AuthenticationApiTest {
    private ApiClient defaultClient;

    @Before
    public void setUp() {

        defaultClient = new ApiClient();

        String clientId = "YOUR CLIENT ID";
        String clientSecret = "YOUR CLIENT SECRET";
        String grantType = "client_credentials";
        String scope = "free-trial-numbers:read free-trial-numbers:write messages:read messages:write virtual-numbers:read virtual-numbers:write reports:read reports:write";

        defaultClient.setAccessSecret(clientId, clientSecret, grantType, scope);
        defaultClient.setBasePath("https://products.api.telstra.com/v2");
        System.out.println("Setting up before each test...");
    }
    /**
     * Generate an access token
     * An OAuth 2.0 access token is required to access the API features. To create a token, use the unique &#x60;client_id&#x60; and &#x60;client_secret&#x60; you received when you registered for the API. You can find these credentials. Note that your access token will expire in 1 hour.
     *
     */

    @Test
    public void authTokenTest() {

        AuthenticationApi authenticationApi = new AuthenticationApi(defaultClient);
        try {
            OAuth oAuthResponse = authenticationApi.authToken(defaultClient.getClientId(), defaultClient.getClientSecret(), defaultClient.getGrantType(), defaultClient.getScope());
            System.out.println("getAuthToken: " + oAuthResponse.getAccessToken());
            assertNotNull(oAuthResponse.getAccessToken());
        } catch (ApiException e) {
            System.err.println("Exception when calling AuthenticationApi#authToken");
            System.err.println("Status code: " + e.getCode());
            System.err.println("Reason: " + e.getResponseBody());
            System.err.println("Response headers: " + e.getResponseHeaders());
            e.printStackTrace();
        }
    }
}
