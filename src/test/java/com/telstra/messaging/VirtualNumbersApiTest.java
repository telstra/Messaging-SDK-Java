/*
 * Messaging API v3.1.0
 * Send and receive SMS & MMS programmatically, leveraging Australia's leading mobile network. With Telstra's Messaging API, we take out the complexity to allow seamless messaging integration into your app, with just a few lines of code. Our REST API is enterprise grade, allowing you to communicate with engaging SMS & MMS messaging in your web and mobile apps in near real-time on a global scale.
 *
 * OpenAPI spec version: 3.1.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.telstra.messaging;

import com.telstra.*;
import org.junit.Before;
import org.junit.Ignore;
import org.junit.Test;
import static com.telstra.messaging.AuthenticationApi.getAuthToken;
import static org.junit.Assert.assertNotNull;



/**
 * API tests for VirtualNumbersApi
 */

public class VirtualNumbersApiTest {

    private ApiClient defaultClient;

    //@Before
    public void setUp() {

        defaultClient = new ApiClient();

        String clientId = "YOUR CLIENT ID";
        String clientSecret = "YOUR CLIENT SECRET";
        String grantType = "client_credentials";
        String scope = "free-trial-numbers:read free-trial-numbers:write messages:read messages:write virtual-numbers:read virtual-numbers:write reports:read reports:write";

        defaultClient.setAccessSecret(clientId, clientSecret, grantType, scope);
        defaultClient.setBasePath("https://products.api.telstra.com/v2");
        System.out.println("Setting up before each test...");
    }

    /**
     * assign a virtual number
     * When a recipient receives your message, you can choose whether they&#x27;ll see a privateNumber, Virtual Number or senderName (paid plans only) in the **from** field. If you want to use a Virtual Number, use this endpoint to assign one. Free Trial users can assign one Virtual Number, and those on a paid plan can assign up to 100.   Virtual Numbers that have not sent a message in 30 days (Free Trial) or sent/received a message in 18 months (paid plans) will be automatically unassigned from your account. You can check the **lastUse** date of your Virtual Number at any time using GET /virtual-numbers/{virtual-number}.  Note that Virtual Numbers used in v2 of the Messaging API cannot be used to send messages in v3. Please assign a new Virtual Number instead. 
     *
     */
    @Ignore
    public void assignNumberTest() {
        try{

            ApiClient apiClient = getAuthToken(defaultClient);
            VirtualNumbersApi virtualNumbersApi = new VirtualNumbersApi(apiClient);

            AssignNumberRequest assignNumberRequest = new AssignNumberRequest()
                    .replyCallbackUrl("http://www.example.com")
                    .addTagsItem("minim qui")
                    .addTagsItem("commodo")
                    .addTagsItem("nostrud laborum minim")
                    .addTagsItem("nulla proident ut voluptat")
                    .addTagsItem("et consectetur dolor")
                    .addTagsItem("est amet cillum")
                    .addTagsItem("exercitation")
                    .addTagsItem("non occaecat cupidatat Duis")
                    .addTagsItem("adipisicing")
                    .addTagsItem("ea aliqua incididunt");
            
            VirtualNumber response = virtualNumbersApi.assignNumber(assignNumberRequest);
            System.out.println(response);
            assertNotNull(response.getVirtualNumber());

        } catch (ApiException e) {
            System.err.println("Exception when calling VirtualNumbersApi");
            System.err.println("Status code: " + e.getCode());
            System.err.println("Reason: " + e.getResponseBody());
            System.err.println("Response headers: " + e.getResponseHeaders());
            e.printStackTrace();
        }
    }
    /**
     * delete a virtual number
     * Use **virtual-number** to remove a Virtual Number that&#x27;s been assigned to your account. 
     *
     */
    @Ignore
    public void deleteNumberTest() {
        try{

            ApiClient apiClient = getAuthToken(defaultClient);
            VirtualNumbersApi virtualNumbersApi = new VirtualNumbersApi(apiClient);

            String virtualNumber = "0428180739";
            virtualNumbersApi.deleteNumber(virtualNumber);

        } catch (ApiException e) {
            System.err.println("Exception when calling VirtualNumbersApi");
            System.err.println("Status code: " + e.getCode());
            System.err.println("Reason: " + e.getResponseBody());
            System.err.println("Response headers: " + e.getResponseHeaders());
            e.printStackTrace();
        }
    }
    /**
     * fetch all virtual numbers
     * Use this endpoint to fetch all Virtual Numbers currently assigned to your account. 
     *
     */
    @Ignore
    public void getNumbersTest() {

        try{

            ApiClient apiClient = getAuthToken(defaultClient);
            VirtualNumbersApi virtualNumbersApi = new VirtualNumbersApi(apiClient);
            Integer limit = null;
            Integer offset = null;
            String filter = null;
            GetNumbers200Response response = virtualNumbersApi.getNumbers(limit, offset, filter);
            System.out.println(response);
            assertNotNull(response.getVirtualNumbers());

        } catch (ApiException e) {
            System.err.println("Exception when calling virtualNumbersApi");
            System.err.println("Status code: " + e.getCode());
            System.err.println("Reason: " + e.getResponseBody());
            System.err.println("Response headers: " + e.getResponseHeaders());
            e.printStackTrace();
        }
    }

    /**
     * Get recipient optouts list
     * Use this endpoint to fetch any mobile number(s) that have opted out of receiving messages from a Virtual Number assigned to your account.  Recipients can opt out at any time by sending a message with industry standard keywords such as STOP, STOPALL, UNSUBSCRIBE, QUIT, END and CANCEL. 
     *
     */
    @Ignore
    public void getRecipientOptoutsTest() {


        try{
            ApiClient apiClient = getAuthToken(defaultClient);
            VirtualNumbersApi virtualNumbersApi = new VirtualNumbersApi(apiClient);

            Integer limit = null;
            Integer offset = null;
            String virtualNumber = "0428180739";

            GetRecipientOptouts200Response response = virtualNumbersApi.getRecipientOptouts(virtualNumber, limit, offset);
            System.out.println(response);
            assertNotNull(response.getRecipientOptouts());

        } catch (ApiException e) {
            System.err.println("Exception when calling virtualNumbersApi");
            System.err.println("Status code: " + e.getCode());
            System.err.println("Reason: " + e.getResponseBody());
            System.err.println("Response headers: " + e.getResponseHeaders());
            e.printStackTrace();
        }
    }
    /**
     * fetch a virtual number
     * Fetch the tags, replyCallbackUrl and lastUse date for a Virtual Number.
     *
     */
    @Ignore
    public void getVirtualNumberTest() {

        try{
            ApiClient apiClient = getAuthToken(defaultClient);
            VirtualNumbersApi virtualNumbersApi = new VirtualNumbersApi(apiClient);

            String virtualNumber = "0428180739";
            VirtualNumber response = virtualNumbersApi.getVirtualNumber(virtualNumber);
            System.out.println(response);
            assertNotNull(response.getVirtualNumber());
            //assertEquals(virtualNumber, response.getVirtualNumber());

        } catch (ApiException e) {
            System.err.println("Exception when calling VirtualNumbersApi");
            System.err.println("Status code: " + e.getCode());
            System.err.println("Reason: " + e.getResponseBody());
            System.err.println("Response headers: " + e.getResponseHeaders());
            e.printStackTrace();
        }
    }
    /**
     * update a virtual number
     * Use **virtual-number** to update the tags and/or replyCallbackUrl of a Virtual Number.  This request body will override the original POST/ virtual-numbers call.
     *          if the Api call fails
     */

    @Ignore
    public void updateNumberTest() {

        try{
            ApiClient apiClient = getAuthToken(defaultClient);
            VirtualNumbersApi virtualNumbersApi = new VirtualNumbersApi(apiClient);

            String virtualNumber ="0428180739";
            String replyCallbackUrl = "http://www.example.com";

            UpdateNumberRequest updateNumberRequest = new UpdateNumberRequest()
                    .replyCallbackUrl(replyCallbackUrl)
                    .addTagsItem("minim qui")
                    .addTagsItem("commodo")
                    .addTagsItem("exercitation");

            VirtualNumber response = virtualNumbersApi.updateNumber(updateNumberRequest, virtualNumber);
            System.out.println(response);
            assertNotNull(response.getVirtualNumber());
            //assertEquals(virtualNumber, response.getVirtualNumber());

        } catch (ApiException e) {
            System.err.println("Exception when calling VirtualNumbersApi");
            System.err.println("Status code: " + e.getCode());
            System.err.println("Reason: " + e.getResponseBody());
            System.err.println("Response headers: " + e.getResponseHeaders());
            e.printStackTrace();
        }
    }
}
