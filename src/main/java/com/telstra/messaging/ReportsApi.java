/*
 * Messaging API v3.1.0
 * Send and receive SMS & MMS programmatically, leveraging Australia's leading mobile network. With Telstra's Messaging API, we take out the complexity to allow seamless messaging integration into your app, with just a few lines of code. Our REST API is enterprise grade, allowing you to communicate with engaging SMS & MMS messaging in your web and mobile apps in near real-time on a global scale. 
 *
 * OpenAPI spec version: 3.1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.telstra.messaging;

import com.telstra.ApiCallback;
import com.telstra.ApiClient;
import com.telstra.ApiException;
import com.telstra.ApiResponse;
import com.telstra.Configuration;
import com.telstra.Pair;
import com.telstra.ProgressRequestBody;
import com.telstra.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.telstra.GetReports200Response;
import com.telstra.GetReportId200Response;
import com.telstra.GetReports201Response;
import com.telstra.ReportsMessagesBody;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ReportsApi {
    private ApiClient apiClient;

    public ReportsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ReportsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for getReport
     * @param contentLanguage  (required)
     * @param accept  (required)
     * @param acceptCharset  (required)
     * @param contentType  (required)
     * @param reportId Use the reportId returned in the POST /reports/{reportType} response.  (required)
     * @param telstraApiVersion  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getReportCall(String contentLanguage, String accept, String acceptCharset, String contentType, UUID reportId, String telstraApiVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/reports/{reportId}"
            .replaceAll("\\{" + "reportId" + "\\}", apiClient.escapeString(reportId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (telstraApiVersion != null)
            localVarHeaderParams.put("Telstra-api-version", apiClient.parameterToString(telstraApiVersion));
        if (contentLanguage != null)
            localVarHeaderParams.put("Content-Language", apiClient.parameterToString(contentLanguage));
        if (accept != null)
            localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));
        if (acceptCharset != null)
            localVarHeaderParams.put("Accept-Charset", apiClient.parameterToString(acceptCharset));
        if (contentType != null)
            localVarHeaderParams.put("Content-Type", apiClient.parameterToString(contentType));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearer_auth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    

    private com.squareup.okhttp.Call getReportValidateBeforeCall(String contentLanguage, String accept, String acceptCharset, String contentType, UUID reportId, String telstraApiVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'contentLanguage' is set
        if (contentLanguage == null) {
            throw new ApiException("Missing the required parameter 'contentLanguage' when calling getReport(Async)");
        }
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling getReport(Async)");
        }
        // verify the required parameter 'acceptCharset' is set
        if (acceptCharset == null) {
            throw new ApiException("Missing the required parameter 'acceptCharset' when calling getReport(Async)");
        }
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling getReport(Async)");
        }
        // verify the required parameter 'reportId' is set
        if (reportId == null) {
            throw new ApiException("Missing the required parameter 'reportId' when calling getReport(Async)");
        }
        
        com.squareup.okhttp.Call call = getReportCall(contentLanguage, accept, acceptCharset, contentType, reportId, telstraApiVersion, progressListener, progressRequestListener);
        return call;

    }

    /**
     * fetch a specific report
     * Fetch a download link for a report generated with POST /reports/{reportId} using the **reportId** returned in the response. Once ready, your report will be available for download for one week.
     * @param reportId Use the reportId returned in the POST /reports/{reportType} response.  (required)
     * @return InlineResponse2005
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetReportId200Response getReport(UUID reportId) throws ApiException {
        String contentLanguage ="en-au";
        String accept ="application/json";
        String acceptCharset ="utf-8";
        String contentType ="application/json";
        String telstraApiVersion ="3.1.0";

        ApiResponse<GetReportId200Response> resp = getReportWithHttpInfo(contentLanguage, accept, acceptCharset, contentType, reportId, telstraApiVersion);
        return resp.getData();
    }

    /**
     * fetch a specific report
     * Fetch a download link for a report generated with POST /reports/{reportId} using the **reportId** returned in the response. Once ready, your report will be available for download for one week. 
     * @param contentLanguage  (required)
     * @param accept  (required)
     * @param acceptCharset  (required)
     * @param contentType  (required)
     * @param reportId Use the reportId returned in the POST /reports/{reportType} response.  (required)
     * @param telstraApiVersion  (optional)
     * @return ApiResponse&lt;InlineResponse2005&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetReportId200Response> getReportWithHttpInfo(String contentLanguage, String accept, String acceptCharset, String contentType, UUID reportId, String telstraApiVersion) throws ApiException {
        com.squareup.okhttp.Call call = getReportValidateBeforeCall(contentLanguage, accept, acceptCharset, contentType, reportId, telstraApiVersion, null, null);
        Type localVarReturnType = new TypeToken<GetReportId200Response>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * fetch a specific report (asynchronously)
     * Fetch a download link for a report generated with POST /reports/{reportId} using the **reportId** returned in the response. Once ready, your report will be available for download for one week. 
     * @param contentLanguage  (required)
     * @param accept  (required)
     * @param acceptCharset  (required)
     * @param contentType  (required)
     * @param reportId Use the reportId returned in the POST /reports/{reportType} response.  (required)
     * @param telstraApiVersion  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getReportAsync(String contentLanguage,  String accept, String acceptCharset, String contentType, UUID reportId, String telstraApiVersion, final ApiCallback<GetReportId200Response> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getReportValidateBeforeCall(contentLanguage, accept, acceptCharset, contentType, reportId, telstraApiVersion, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetReportId200Response>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getReports
     * @param contentLanguage  (required)
     * @param accept  (required)
     * @param acceptCharset  (required)
     * @param contentType  (required)
     * @param telstraApiVersion  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getReportsCall(String contentLanguage, String accept, String acceptCharset, String contentType, String telstraApiVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/reports";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (telstraApiVersion != null)
            localVarHeaderParams.put("Telstra-api-version", apiClient.parameterToString(telstraApiVersion));
        if (contentLanguage != null)
            localVarHeaderParams.put("Content-Language", apiClient.parameterToString(contentLanguage));
        if (accept != null)
            localVarHeaderParams.put("accept", apiClient.parameterToString(accept));
        if (acceptCharset != null)
            localVarHeaderParams.put("Accept-Charset", apiClient.parameterToString(acceptCharset));
        if (contentType != null)
            localVarHeaderParams.put("content-type", apiClient.parameterToString(contentType));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearer_auth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    

    private com.squareup.okhttp.Call getReportsValidateBeforeCall(String contentLanguage, String accept, String acceptCharset, String contentType, String telstraApiVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'contentLanguage' is set
        if (contentLanguage == null) {
            throw new ApiException("Missing the required parameter 'contentLanguage' when calling getReports(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling getReports(Async)");
        }
        // verify the required parameter 'acceptCharset' is set
        if (acceptCharset == null) {
            throw new ApiException("Missing the required parameter 'acceptCharset' when calling getReports(Async)");
        }
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling getReports(Async)");
        }
        
        com.squareup.okhttp.Call call = getReportsCall(contentLanguage, accept, acceptCharset, contentType, telstraApiVersion, progressListener, progressRequestListener);
        return call;
    }

    /**
     * fetch all reports
     * Fetch details of all reports recently generated for your account. Use it to check the status of a report, plus fetch the report ID, status, report type and expiry date.
     * @return GetReports200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetReports200Response getReports() throws ApiException {
        String contentLanguage ="en-au";
        String accept ="application/json";
        String acceptCharset ="utf-8";
        String contentType ="application/json";
        String telstraApiVersion ="3.1.0";

        ApiResponse<GetReports200Response> resp = getReportsWithHttpInfo(contentLanguage, accept, acceptCharset, contentType, telstraApiVersion);
        return resp.getData();
    }

    /**
     * fetch all reports
     * Fetch details of all reports recently generated for your account. Use it to check the status of a report, plus fetch the report ID, status, report type and expiry date. 
     * @param contentLanguage  (required)
     * @param accept  (required)
     * @param acceptCharset  (required)
     * @param contentType  (required)
     * @param telstraApiVersion  (optional)
     * @return ApiResponse&lt;InlineResponse2004&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetReports200Response> getReportsWithHttpInfo(String contentLanguage, String accept, String acceptCharset, String contentType, String telstraApiVersion) throws ApiException {
        com.squareup.okhttp.Call call = getReportsValidateBeforeCall(contentLanguage,  accept, acceptCharset, contentType, telstraApiVersion, null, null);
        Type localVarReturnType = new TypeToken<GetReports200Response>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * fetch all reports (asynchronously)
     * Fetch details of all reports recently generated for your account. Use it to check the status of a report, plus fetch the report ID, status, report type and expiry date. 
     * @param contentLanguage  (required)
     * @param accept  (required)
     * @param acceptCharset  (required)
     * @param contentType  (required)
     * @param telstraApiVersion  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getReportsAsync(String contentLanguage,  String accept, String acceptCharset, String contentType, String telstraApiVersion, final ApiCallback<GetReports200Response> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getReportsValidateBeforeCall(contentLanguage,accept, acceptCharset, contentType, telstraApiVersion, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetReports200Response>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for messagesReport
     * @param body  (required)
     * @param contentLanguage  (required)
     * @param accept  (required)
     * @param acceptCharset  (required)
     * @param contentType  (required)
     * @param telstraApiVersion  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call messagesReportCall(ReportsMessagesBody body, String contentLanguage, String accept, String acceptCharset, String contentType, String telstraApiVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/reports/messages";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (telstraApiVersion != null)
            localVarHeaderParams.put("Telstra-api-version", apiClient.parameterToString(telstraApiVersion));
        if (contentLanguage != null)
            localVarHeaderParams.put("Content-Language", apiClient.parameterToString(contentLanguage));
        if (accept != null)
            localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));
        if (acceptCharset != null)
            localVarHeaderParams.put("Accept-Charset", apiClient.parameterToString(acceptCharset));
        if (contentType != null)
            localVarHeaderParams.put("Content-Type", apiClient.parameterToString(contentType));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearer_auth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    

    private com.squareup.okhttp.Call messagesReportValidateBeforeCall(ReportsMessagesBody body, String contentLanguage, String accept, String acceptCharset, String contentType, String telstraApiVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling messagesReport(Async)");
        }
        // verify the required parameter 'contentLanguage' is set
        if (contentLanguage == null) {
            throw new ApiException("Missing the required parameter 'contentLanguage' when calling messagesReport(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling messagesReport(Async)");
        }
        // verify the required parameter 'acceptCharset' is set
        if (acceptCharset == null) {
            throw new ApiException("Missing the required parameter 'acceptCharset' when calling messagesReport(Async)");
        }
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling messagesReport(Async)");
        }
        
        com.squareup.okhttp.Call call = messagesReportCall(body, contentLanguage,  accept, acceptCharset, contentType, telstraApiVersion, progressListener, progressRequestListener);
        return call;
        
    }

    /**
     * submit a request for a messages report
     * Request a CSV report of messages (both incoming and outgoing) that have been sent to/from your account within the last three months. You can request details for a specific timeframe, and filter your messages by tags, recipient number or Virtual Number.  A 201 Created means your report has been queued for generation. Make a note of the reportId returned in the response. You&#x27;ll need this to check the status of your report and fetch your download link with GET reports/{reportId}. If you supplied a reportCallbackUrl in the request we&#x27;ll also notify it when your report is ready for download.  Once your report is generated, it will be available for download for one week. The expiry date is returned in the response. 
     * @param reportsMessagesBody  (required)
     * @return InlineResponse201
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetReports201Response messagesReport(ReportsMessagesBody reportsMessagesBody) throws ApiException {
        String contentLanguage ="en-au";
        String accept ="application/json";
        String acceptCharset ="utf-8";
        String contentType ="application/json";
        String telstraApiVersion ="3.1.0";

        ApiResponse<GetReports201Response> resp = messagesReportWithHttpInfo(reportsMessagesBody, contentLanguage, accept, acceptCharset, contentType, telstraApiVersion);
        return resp.getData();
    }

    /**
     * submit a request for a messages report
     * Request a CSV report of messages (both incoming and outgoing) that have been sent to/from your account within the last three months. You can request details for a specific timeframe, and filter your messages by tags, recipient number or Virtual Number.  A 201 Created means your report has been queued for generation. Make a note of the reportId returned in the response. You&#x27;ll need this to check the status of your report and fetch your download link with GET reports/{reportId}. If you supplied a reportCallbackUrl in the request we&#x27;ll also notify it when your report is ready for download.  Once your report is generated, it will be available for download for one week. The expiry date is returned in the response. 
     * @param body  (required)
     * @param contentLanguage  (required)
     * @param accept  (required)
     * @param acceptCharset  (required)
     * @param contentType  (required)
     * @param telstraApiVersion  (optional)
     * @return ApiResponse&lt;InlineResponse201&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetReports201Response> messagesReportWithHttpInfo(ReportsMessagesBody body, String contentLanguage, String accept, String acceptCharset, String contentType, String telstraApiVersion) throws ApiException {
        com.squareup.okhttp.Call call = messagesReportValidateBeforeCall(body, contentLanguage, accept, acceptCharset, contentType, telstraApiVersion, null, null);
        Type localVarReturnType = new TypeToken<GetReports201Response>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * submit a request for a messages report (asynchronously)
     * Request a CSV report of messages (both incoming and outgoing) that have been sent to/from your account within the last three months. You can request details for a specific timeframe, and filter your messages by tags, recipient number or Virtual Number.  A 201 Created means your report has been queued for generation. Make a note of the reportId returned in the response. You&#x27;ll need this to check the status of your report and fetch your download link with GET reports/{reportId}. If you supplied a reportCallbackUrl in the request we&#x27;ll also notify it when your report is ready for download.  Once your report is generated, it will be available for download for one week. The expiry date is returned in the response. 
     * @param body  (required)
     * @param contentLanguage  (required)
     * @param accept  (required)
     * @param acceptCharset  (required)
     * @param contentType  (required)
     * @param telstraApiVersion  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call messagesReportAsync(ReportsMessagesBody body, String contentLanguage, String accept, String acceptCharset, String contentType, String telstraApiVersion, final ApiCallback<GetReports201Response> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = messagesReportValidateBeforeCall(body, contentLanguage, accept, acceptCharset, contentType, telstraApiVersion, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetReports201Response>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
