/*
 * Messaging API v3.1.0
 * Send and receive SMS & MMS programmatically, leveraging Australia's leading mobile network. With Telstra's Messaging API, we take out the complexity to allow seamless messaging integration into your app, with just a few lines of code. Our REST API is enterprise grade, allowing you to communicate with engaging SMS & MMS messaging in your web and mobile apps in near real-time on a global scale. 
 *
 * OpenAPI spec version: 3.1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.telstra.messaging;

import com.telstra.*;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class VirtualNumbersApi {
    private ApiClient apiClient;

    public VirtualNumbersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public VirtualNumbersApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for assignNumber
     * @param body  (required)
     * @param contentLanguage  (required)
     * @param accept  (required)
     * @param acceptCharset  (required)
     * @param contentType  (required)
     * @param telstraApiVersion  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call assignNumberCall(Object body, String contentLanguage, String accept, String acceptCharset, String contentType, String telstraApiVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/virtual-numbers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (telstraApiVersion != null)
            localVarHeaderParams.put("Telstra-api-version", apiClient.parameterToString(telstraApiVersion));
        if (contentLanguage != null)
            localVarHeaderParams.put("Content-Language", apiClient.parameterToString(contentLanguage));
        if (accept != null)
            localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));
        if (acceptCharset != null)
            localVarHeaderParams.put("Accept-Charset", apiClient.parameterToString(acceptCharset));
        if (contentType != null)
            localVarHeaderParams.put("Content-Type", apiClient.parameterToString(contentType));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearer_auth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    

    private com.squareup.okhttp.Call assignNumberValidateBeforeCall(Object body, String contentLanguage, String accept, String acceptCharset, String contentType, String telstraApiVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling assignNumber(Async)");
        }
        // verify the required parameter 'contentLanguage' is set
        if (contentLanguage == null) {
            throw new ApiException("Missing the required parameter 'contentLanguage' when calling assignNumber(Async)");
        }
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling assignNumber(Async)");
        }
        // verify the required parameter 'acceptCharset' is set
        if (acceptCharset == null) {
            throw new ApiException("Missing the required parameter 'acceptCharset' when calling assignNumber(Async)");
        }
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling assignNumber(Async)");
        }
        
        com.squareup.okhttp.Call call = assignNumberCall(body, contentLanguage, accept, acceptCharset, contentType, telstraApiVersion, progressListener, progressRequestListener);
        return call;
    }

    /**
     * assign a virtual number
     * When a recipient receives your message, you can choose whether they&#x27;ll see a privateNumber, Virtual Number or senderName (paid plans only) in the **from** field. If you want to use a Virtual Number, use this endpoint to assign one. Free Trial users can assign one Virtual Number, and those on a paid plan can assign up to 100.   Virtual Numbers that have not sent a message in 30 days (Free Trial) or sent/received a message in 18 months (paid plans) will be automatically unassigned from your account. You can check the **lastUse** date of your Virtual Number at any time using GET /virtual-numbers/{virtual-number}.  Note that Virtual Numbers used in v2 of the Messaging API cannot be used to send messages in v3. Please assign a new Virtual Number instead. 
     * @param assignNumberRequest  (required)
     * @return VirtualNumber
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VirtualNumber assignNumber(AssignNumberRequest assignNumberRequest) throws ApiException {
        String contentLanguage ="en-au";
        String accept ="application/json";
        String acceptCharset ="utf-8";
        String contentType ="application/json";
        String telstraApiVersion ="3.1.0";

        ApiResponse<VirtualNumber> resp = assignNumberWithHttpInfo(assignNumberRequest, contentLanguage, accept, acceptCharset, contentType, telstraApiVersion);
        return resp.getData();
    }

    /**
     * assign a virtual number
     * When a recipient receives your message, you can choose whether they&#x27;ll see a privateNumber, Virtual Number or senderName (paid plans only) in the **from** field. If you want to use a Virtual Number, use this endpoint to assign one. Free Trial users can assign one Virtual Number, and those on a paid plan can assign up to 100.   Virtual Numbers that have not sent a message in 30 days (Free Trial) or sent/received a message in 18 months (paid plans) will be automatically unassigned from your account. You can check the **lastUse** date of your Virtual Number at any time using GET /virtual-numbers/{virtual-number}.  Note that Virtual Numbers used in v2 of the Messaging API cannot be used to send messages in v3. Please assign a new Virtual Number instead. 
     * @param body  (required)
     * @param contentLanguage  (required)
     * @param accept  (required)
     * @param acceptCharset  (required)
     * @param contentType  (required)
     * @param telstraApiVersion  (optional)
     * @return ApiResponse&lt;VirtualNumber&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VirtualNumber> assignNumberWithHttpInfo(Object body, String contentLanguage, String accept, String acceptCharset, String contentType, String telstraApiVersion) throws ApiException {
        com.squareup.okhttp.Call call = assignNumberValidateBeforeCall(body, contentLanguage, accept, acceptCharset, contentType, telstraApiVersion, null, null);
        Type localVarReturnType = new TypeToken<VirtualNumber>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * assign a virtual number (asynchronously)
     * When a recipient receives your message, you can choose whether they&#x27;ll see a privateNumber, Virtual Number or senderName (paid plans only) in the **from** field. If you want to use a Virtual Number, use this endpoint to assign one. Free Trial users can assign one Virtual Number, and those on a paid plan can assign up to 100.   Virtual Numbers that have not sent a message in 30 days (Free Trial) or sent/received a message in 18 months (paid plans) will be automatically unassigned from your account. You can check the **lastUse** date of your Virtual Number at any time using GET /virtual-numbers/{virtual-number}.  Note that Virtual Numbers used in v2 of the Messaging API cannot be used to send messages in v3. Please assign a new Virtual Number instead. 
     * @param body  (required)
     * @param contentLanguage  (required)
     * @param authorization  (required)
     * @param accept  (required)
     * @param acceptCharset  (required)
     * @param contentType  (required)
     * @param telstraApiVersion  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call assignNumberAsync(Object body, String contentLanguage,  String accept, String acceptCharset, String contentType, String telstraApiVersion, final ApiCallback<VirtualNumber> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = assignNumberValidateBeforeCall(body, contentLanguage, accept, acceptCharset, contentType, telstraApiVersion, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VirtualNumber>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteNumber
     * @param contentLanguage  (required)
     * @param accept  (required)
     * @param acceptCharset  (required)
     * @param contentType  (required)
     * @param virtualNumber Write the Virtual Number here, using national format (e.g. 0412345678).  (required)
     * @param telstraApiVersion  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteNumberCall(String contentLanguage,  String accept, String acceptCharset, String contentType, String virtualNumber, String telstraApiVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/virtual-numbers/{virtual-number}"
            .replaceAll("\\{" + "virtual-number" + "\\}", apiClient.escapeString(virtualNumber));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (telstraApiVersion != null)
            localVarHeaderParams.put("Telstra-api-version", apiClient.parameterToString(telstraApiVersion));
        if (contentLanguage != null)
            localVarHeaderParams.put("Content-Language", apiClient.parameterToString(contentLanguage));
        if (accept != null)
            localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));
        if (acceptCharset != null)
            localVarHeaderParams.put("Accept-Charset", apiClient.parameterToString(acceptCharset));
        if (contentType != null)
            localVarHeaderParams.put("Content-Type", apiClient.parameterToString(contentType));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearer_auth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    

    private com.squareup.okhttp.Call deleteNumberValidateBeforeCall(String contentLanguage, String accept, String acceptCharset, String contentType, String virtualNumber, String telstraApiVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'contentLanguage' is set
        if (contentLanguage == null) {
            throw new ApiException("Missing the required parameter 'contentLanguage' when calling deleteNumber(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling deleteNumber(Async)");
        }
        // verify the required parameter 'acceptCharset' is set
        if (acceptCharset == null) {
            throw new ApiException("Missing the required parameter 'acceptCharset' when calling deleteNumber(Async)");
        }
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling deleteNumber(Async)");
        }
        // verify the required parameter 'virtualNumber' is set
        if (virtualNumber == null) {
            throw new ApiException("Missing the required parameter 'virtualNumber' when calling deleteNumber(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteNumberCall(contentLanguage, accept, acceptCharset, contentType, virtualNumber, telstraApiVersion, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * delete a virtual number
     * Use **virtual-number** to remove a Virtual Number that&#x27;s been assigned to your account.
     * @param virtualNumber Write the Virtual Number here, using national format (e.g. 0412345678).  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteNumber(String virtualNumber) throws ApiException {
        String contentLanguage ="en-au";
        String accept ="application/json";
        String acceptCharset ="utf-8";
        String contentType ="application/json";
        String telstraApiVersion ="3.1.0";

        deleteNumberWithHttpInfo(contentLanguage, accept, acceptCharset, contentType, virtualNumber, telstraApiVersion);
    }

    /**
     * delete a virtual number
     * Use **virtual-number** to remove a Virtual Number that&#x27;s been assigned to your account. 
     * @param contentLanguage  (required)
     * @param accept  (required)
     * @param acceptCharset  (required)
     * @param contentType  (required)
     * @param virtualNumber Write the Virtual Number here, using national format (e.g. 0412345678).  (required)
     * @param telstraApiVersion  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteNumberWithHttpInfo(String contentLanguage,  String accept, String acceptCharset, String contentType, String virtualNumber, String telstraApiVersion) throws ApiException {
        com.squareup.okhttp.Call call = deleteNumberValidateBeforeCall(contentLanguage,  accept, acceptCharset, contentType, virtualNumber, telstraApiVersion, null, null);
        return apiClient.execute(call);
    }

    /**
     * delete a virtual number (asynchronously)
     * Use **virtual-number** to remove a Virtual Number that&#x27;s been assigned to your account. 
     * @param contentLanguage  (required)
     * @param accept  (required)
     * @param acceptCharset  (required)
     * @param contentType  (required)
     * @param virtualNumber Write the Virtual Number here, using national format (e.g. 0412345678).  (required)
     * @param telstraApiVersion  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteNumberAsync(String contentLanguage,  String accept, String acceptCharset, String contentType, String virtualNumber, String telstraApiVersion, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteNumberValidateBeforeCall(contentLanguage, accept, acceptCharset, contentType, virtualNumber, telstraApiVersion, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getNumbers
     * @param contentLanguage  (required)
     * @param accept  (required)
     * @param acceptCharset  (required)
     * @param contentType  (required)
     * @param telstraApiVersion  (optional)
     * @param limit Tell us how many results you want us to return, up to a maximum of 50.  (optional, default to 10)
     * @param offset Use the offset to navigate between the response results. An offset of 0 will display the first page of results, and so on.  (optional, default to 0)
     * @param filter Filter your Virtual Numbers by tag or by number. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getNumbersCall(String contentLanguage,  String accept, String acceptCharset, String contentType, String telstraApiVersion, Integer limit, Integer offset, String filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/virtual-numbers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (filter != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (telstraApiVersion != null)
            localVarHeaderParams.put("Telstra-api-version", apiClient.parameterToString(telstraApiVersion));
        if (contentLanguage != null)
         localVarHeaderParams.put("Content-Language", apiClient.parameterToString(contentLanguage));
        if (accept != null)
            localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));
        if (acceptCharset != null)
            localVarHeaderParams.put("Accept-Charset", apiClient.parameterToString(acceptCharset));
        if (contentType != null)
            localVarHeaderParams.put("Content-Type", apiClient.parameterToString(contentType));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearer_auth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    

    private com.squareup.okhttp.Call getNumbersValidateBeforeCall(String contentLanguage,  String accept, String acceptCharset, String contentType, String telstraApiVersion, Integer limit, Integer offset, String filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'contentLanguage' is set
        if (contentLanguage == null) {
            throw new ApiException("Missing the required parameter 'contentLanguage' when calling getNumbers(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling getNumbers(Async)");
        }
        // verify the required parameter 'acceptCharset' is set
        if (acceptCharset == null) {
            throw new ApiException("Missing the required parameter 'acceptCharset' when calling getNumbers(Async)");
        }
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling getNumbers(Async)");
        }
        
        com.squareup.okhttp.Call call = getNumbersCall(contentLanguage,  accept, acceptCharset, contentType, telstraApiVersion, limit, offset, filter, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * fetch all virtual numbers
     * Use this endpoint to fetch all Virtual Numbers currently assigned to your account.
     * @return InlineResponse2001
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetNumbers200Response getNumbers( Integer limit,Integer offset,String filter) throws ApiException {
        String contentLanguage ="en-au";
        String accept ="application/json";
        String acceptCharset ="utf-8";
        String contentType ="application/json";
        String telstraApiVersion ="3.1.0";

        ApiResponse<GetNumbers200Response> resp = getNumbersWithHttpInfo(contentLanguage, accept, acceptCharset, contentType, telstraApiVersion, limit, offset, filter);
        return resp.getData();
    }

    /**
     * fetch all virtual numbers
     * Use this endpoint to fetch all Virtual Numbers currently assigned to your account. 
     * @param contentLanguage  (required)
     * @param accept  (required)
     * @param acceptCharset  (required)
     * @param contentType  (required)
     * @param telstraApiVersion  (optional)
     * @param limit Tell us how many results you want us to return, up to a maximum of 50.  (optional, default to 10)
     * @param offset Use the offset to navigate between the response results. An offset of 0 will display the first page of results, and so on.  (optional, default to 0)
     * @param filter Filter your Virtual Numbers by tag or by number. (optional)
     * @return ApiResponse&lt;InlineResponse2001&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetNumbers200Response> getNumbersWithHttpInfo(String contentLanguage,  String accept, String acceptCharset, String contentType, String telstraApiVersion, Integer limit, Integer offset, String filter) throws ApiException {
        com.squareup.okhttp.Call call = getNumbersValidateBeforeCall(contentLanguage, accept, acceptCharset, contentType, telstraApiVersion, limit, offset, filter, null, null);
        Type localVarReturnType = new TypeToken<GetNumbers200Response>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * fetch all virtual numbers (asynchronously)
     * Use this endpoint to fetch all Virtual Numbers currently assigned to your account. 
     * @param contentLanguage  (required)
     * @param authorization  (required)
     * @param accept  (required)
     * @param acceptCharset  (required)
     * @param contentType  (required)
     * @param telstraApiVersion  (optional)
     * @param limit Tell us how many results you want us to return, up to a maximum of 50.  (optional, default to 10)
     * @param offset Use the offset to navigate between the response results. An offset of 0 will display the first page of results, and so on.  (optional, default to 0)
     * @param filter Filter your Virtual Numbers by tag or by number. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getNumbersAsync(String contentLanguage, String authorization, String accept, String acceptCharset, String contentType, String telstraApiVersion, Integer limit, Integer offset, String filter, final ApiCallback<GetNumbers200Response> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getNumbersValidateBeforeCall(contentLanguage,  accept, acceptCharset, contentType, telstraApiVersion, limit, offset, filter, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetNumbers200Response>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getRecipientOptouts
     * @param contentLanguage  (required)
     * @param accept  (required)
     * @param acceptCharset  (required)
     * @param contentType  (required)
     * @param virtualNumber Write the Virtual Number here, using national format (e.g. 0412345678).  (required)
     * @param telstraApiVersion  (optional)
     * @param limit Tell us how many results you want us to return, up to a maximum of 50.  (optional, default to 10)
     * @param offset Use the offset to navigate between the response results. An offset of 0 will display the first page of results, and so on.  (optional, default to 0)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getRecipientOptoutsCall(String contentLanguage,  String accept, String acceptCharset, String contentType, String virtualNumber, String telstraApiVersion, Integer limit, Integer offset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/virtual-numbers/{virtual-number}/optouts"
            .replaceAll("\\{" + "virtual-number" + "\\}", apiClient.escapeString(virtualNumber));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (telstraApiVersion != null)
            localVarHeaderParams.put("Telstra-api-version", apiClient.parameterToString(telstraApiVersion));
        if (contentLanguage != null)
            localVarHeaderParams.put("Content-Language", apiClient.parameterToString(contentLanguage));

        if (accept != null)
            localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));
        if (acceptCharset != null)
            localVarHeaderParams.put("Accept-Charset", apiClient.parameterToString(acceptCharset));
        if (contentType != null)
            localVarHeaderParams.put("Content-Type", apiClient.parameterToString(contentType));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearer_auth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    

    private com.squareup.okhttp.Call getRecipientOptoutsValidateBeforeCall(String contentLanguage, String accept, String acceptCharset, String contentType, String virtualNumber, String telstraApiVersion, Integer limit, Integer offset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'contentLanguage' is set
        if (contentLanguage == null) {
            throw new ApiException("Missing the required parameter 'contentLanguage' when calling getRecipientOptouts(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling getRecipientOptouts(Async)");
        }
        // verify the required parameter 'acceptCharset' is set
        if (acceptCharset == null) {
            throw new ApiException("Missing the required parameter 'acceptCharset' when calling getRecipientOptouts(Async)");
        }
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling getRecipientOptouts(Async)");
        }
        // verify the required parameter 'virtualNumber' is set
        if (virtualNumber == null) {
            throw new ApiException("Missing the required parameter 'virtualNumber' when calling getRecipientOptouts(Async)");
        }
        
        com.squareup.okhttp.Call call = getRecipientOptoutsCall(contentLanguage, accept, acceptCharset, contentType, virtualNumber, telstraApiVersion, limit, offset, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get recipient optouts list
     * Use this endpoint to fetch any mobile number(s) that have opted out of receiving messages from a Virtual Number assigned to your account.  Recipients can opt out at any time by sending a message with industry standard keywords such as STOP, STOPALL, UNSUBSCRIBE, QUIT, END and CANCEL.
     * @param virtualNumber Write the Virtual Number here, using national format (e.g. 0412345678).  (required)
     * @param limit Tell us how many results you want us to return, up to a maximum of 50.  (optional, default to 10)
     * @param offset Use the offset to navigate between the response results. An offset of 0 will display the first page of results, and so on.  (optional, default to 0)
     * @return GetRecipientOptouts200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetRecipientOptouts200Response getRecipientOptouts(String virtualNumber, Integer limit, Integer offset) throws ApiException {
        String contentLanguage ="en-au";
        String accept ="application/json";
        String acceptCharset ="utf-8";
        String contentType ="application/json";
        String telstraApiVersion ="3.x";

        ApiResponse<GetRecipientOptouts200Response> resp = getRecipientOptoutsWithHttpInfo(contentLanguage,  accept, acceptCharset, contentType, virtualNumber, telstraApiVersion, limit, offset);
        return resp.getData();
    }

    /**
     * Get recipient optouts list
     * Use this endpoint to fetch any mobile number(s) that have opted out of receiving messages from a Virtual Number assigned to your account.  Recipients can opt out at any time by sending a message with industry standard keywords such as STOP, STOPALL, UNSUBSCRIBE, QUIT, END and CANCEL. 
     * @param contentLanguage  (required)
     * @param accept  (required)
     * @param acceptCharset  (required)
     * @param contentType  (required)
     * @param virtualNumber Write the Virtual Number here, using national format (e.g. 0412345678).  (required)
     * @param telstraApiVersion  (optional)
     * @param limit Tell us how many results you want us to return, up to a maximum of 50.  (optional, default to 10)
     * @param offset Use the offset to navigate between the response results. An offset of 0 will display the first page of results, and so on.  (optional, default to 0)
     * @return ApiResponse&lt;InlineResponse2002&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetRecipientOptouts200Response> getRecipientOptoutsWithHttpInfo(String contentLanguage,  String accept, String acceptCharset, String contentType, String virtualNumber, String telstraApiVersion, Integer limit, Integer offset) throws ApiException {
        com.squareup.okhttp.Call call = getRecipientOptoutsValidateBeforeCall(contentLanguage,  accept, acceptCharset, contentType, virtualNumber, telstraApiVersion, limit, offset, null, null);
        Type localVarReturnType = new TypeToken<GetRecipientOptouts200Response>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get recipient optouts list (asynchronously)
     * Use this endpoint to fetch any mobile number(s) that have opted out of receiving messages from a Virtual Number assigned to your account.  Recipients can opt out at any time by sending a message with industry standard keywords such as STOP, STOPALL, UNSUBSCRIBE, QUIT, END and CANCEL. 
     * @param contentLanguage  (required)
     * @param authorization  (required)
     * @param accept  (required)
     * @param acceptCharset  (required)
     * @param contentType  (required)
     * @param virtualNumber Write the Virtual Number here, using national format (e.g. 0412345678).  (required)
     * @param telstraApiVersion  (optional)
     * @param limit Tell us how many results you want us to return, up to a maximum of 50.  (optional, default to 10)
     * @param offset Use the offset to navigate between the response results. An offset of 0 will display the first page of results, and so on.  (optional, default to 0)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getRecipientOptoutsAsync(String contentLanguage, String accept, String acceptCharset, String contentType, String virtualNumber, String telstraApiVersion, Integer limit, Integer offset, final ApiCallback<GetRecipientOptouts200Response> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getRecipientOptoutsValidateBeforeCall(contentLanguage, accept, acceptCharset, contentType, virtualNumber, telstraApiVersion, limit, offset, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetRecipientOptouts200Response>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getVirtualNumber
     * @param contentLanguage  (required)
     * @param accept  (required)
     * @param acceptCharset  (required)
     * @param contentType  (required)
     * @param virtualNumber Write the Virtual Number here, using national format (e.g. 0412345678).  (required)
     * @param telstraApiVersion  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getVirtualNumberCall(String contentLanguage,  String accept, String acceptCharset, String contentType, String virtualNumber, String telstraApiVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/virtual-numbers/{virtual-number}"
            .replaceAll("\\{" + "virtual-number" + "\\}", apiClient.escapeString(virtualNumber));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (telstraApiVersion != null)
            localVarHeaderParams.put("Telstra-api-version", apiClient.parameterToString(telstraApiVersion));
        if (contentLanguage != null)
            localVarHeaderParams.put("Content-Language", apiClient.parameterToString(contentLanguage));
        if (accept != null)
            localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));
        if (acceptCharset != null)
            localVarHeaderParams.put("Accept-Charset", apiClient.parameterToString(acceptCharset));
        if (contentType != null)
            localVarHeaderParams.put("Content-Type", apiClient.parameterToString(contentType));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearer_auth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    

    private com.squareup.okhttp.Call getVirtualNumberValidateBeforeCall(String contentLanguage, String accept, String acceptCharset, String contentType, String virtualNumber, String telstraApiVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'contentLanguage' is set
        if (contentLanguage == null) {
            throw new ApiException("Missing the required parameter 'contentLanguage' when calling getVirtualNumber(Async)");
        }
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling getVirtualNumber(Async)");
        }
        // verify the required parameter 'acceptCharset' is set
        if (acceptCharset == null) {
            throw new ApiException("Missing the required parameter 'acceptCharset' when calling getVirtualNumber(Async)");
        }
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling getVirtualNumber(Async)");
        }
        // verify the required parameter 'virtualNumber' is set
        if (virtualNumber == null) {
            throw new ApiException("Missing the required parameter 'virtualNumber' when calling getVirtualNumber(Async)");
        }
        
        com.squareup.okhttp.Call call = getVirtualNumberCall(contentLanguage, accept, acceptCharset, contentType, virtualNumber, telstraApiVersion, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * fetch a virtual number
     * Fetch the tags, replyCallbackUrl and lastUse date for a Virtual Number.
     * @param virtualNumber Write the Virtual Number here, using national format (e.g. 0412345678).  (required)
     * @return VirtualNumber
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VirtualNumber getVirtualNumber(String virtualNumber) throws ApiException {
        String contentLanguage ="en-au";
        String accept ="application/json";
        String acceptCharset ="utf-8";
        String contentType ="application/json";
        String telstraApiVersion ="3.1.0";

        ApiResponse<VirtualNumber> resp = getVirtualNumberWithHttpInfo(contentLanguage, accept, acceptCharset, contentType, virtualNumber, telstraApiVersion);
        return resp.getData();
    }

    /**
     * fetch a virtual number
     * Fetch the tags, replyCallbackUrl and lastUse date for a Virtual Number.
     * @param contentLanguage  (required)
     * @param accept  (required)
     * @param acceptCharset  (required)
     * @param contentType  (required)
     * @param virtualNumber Write the Virtual Number here, using national format (e.g. 0412345678).  (required)
     * @param telstraApiVersion  (optional)
     * @return ApiResponse&lt;VirtualNumber&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VirtualNumber> getVirtualNumberWithHttpInfo(String contentLanguage,  String accept, String acceptCharset, String contentType, String virtualNumber, String telstraApiVersion) throws ApiException {
        com.squareup.okhttp.Call call = getVirtualNumberValidateBeforeCall(contentLanguage, accept, acceptCharset, contentType, virtualNumber, telstraApiVersion, null, null);
        Type localVarReturnType = new TypeToken<VirtualNumber>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * fetch a virtual number (asynchronously)
     * Fetch the tags, replyCallbackUrl and lastUse date for a Virtual Number.
     * @param contentLanguage  (required)
     * @param authorization  (required)
     * @param accept  (required)
     * @param acceptCharset  (required)
     * @param contentType  (required)
     * @param virtualNumber Write the Virtual Number here, using national format (e.g. 0412345678).  (required)
     * @param telstraApiVersion  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getVirtualNumberAsync(String contentLanguage, String accept, String acceptCharset, String contentType, String virtualNumber, String telstraApiVersion, final ApiCallback<VirtualNumber> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getVirtualNumberValidateBeforeCall(contentLanguage, accept, acceptCharset, contentType, virtualNumber, telstraApiVersion, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VirtualNumber>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateNumber
     * @param body  (required)
     * @param contentLanguage  (required)
     * @param accept  (required)
     * @param acceptCharset  (required)
     * @param contentType  (required)
     * @param virtualNumber Write the Virtual Number here, using national format (e.g. 0412345678).  (required)
     * @param telstraApiVersion  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateNumberCall(Object body, String contentLanguage,  String accept, String acceptCharset, String contentType, String virtualNumber, String telstraApiVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/virtual-numbers/{virtual-number}"
            .replaceAll("\\{" + "virtual-number" + "\\}", apiClient.escapeString(virtualNumber));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (telstraApiVersion != null)
            localVarHeaderParams.put("Telstra-api-version", apiClient.parameterToString(telstraApiVersion));
        if (contentLanguage != null)
            localVarHeaderParams.put("Content-Language", apiClient.parameterToString(contentLanguage));
        if (accept != null)
            localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));
        if (acceptCharset != null)
            localVarHeaderParams.put("Accept-Charset", apiClient.parameterToString(acceptCharset));
        if (contentType != null)
            localVarHeaderParams.put("Content-Type", apiClient.parameterToString(contentType));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearer_auth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    

    private com.squareup.okhttp.Call updateNumberValidateBeforeCall(Object body, String contentLanguage,  String accept, String acceptCharset, String contentType, String virtualNumber, String telstraApiVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateNumber(Async)");
        }
        // verify the required parameter 'contentLanguage' is set
        if (contentLanguage == null) {
            throw new ApiException("Missing the required parameter 'contentLanguage' when calling updateNumber(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling updateNumber(Async)");
        }
        // verify the required parameter 'acceptCharset' is set
        if (acceptCharset == null) {
            throw new ApiException("Missing the required parameter 'acceptCharset' when calling updateNumber(Async)");
        }
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling updateNumber(Async)");
        }
        // verify the required parameter 'virtualNumber' is set
        if (virtualNumber == null) {
            throw new ApiException("Missing the required parameter 'virtualNumber' when calling updateNumber(Async)");
        }
        
        com.squareup.okhttp.Call call = updateNumberCall(body, contentLanguage, accept, acceptCharset, contentType, virtualNumber, telstraApiVersion, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * update a virtual number
     * Use **virtual-number** to update the tags and/or replyCallbackUrl of a Virtual Number.  This request body will override the original POST/ virtual-numbers call. 
     * @param updateNumberRequest  (required)
     * @param virtualNumber Write the Virtual Number here, using national format (e.g. 0412345678).  (required)
     * @return VirtualNumber
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VirtualNumber updateNumber(UpdateNumberRequest updateNumberRequest,  String virtualNumber) throws ApiException {
        String contentLanguage ="en-au";
        String accept ="application/json";
        String acceptCharset ="utf-8";
        String contentType ="application/json";
        String telstraApiVersion ="3.x";

        ApiResponse<VirtualNumber> resp = updateNumberWithHttpInfo(updateNumberRequest, contentLanguage,accept, acceptCharset, contentType, virtualNumber, telstraApiVersion);
        return resp.getData();
    }

    /**
     * update a virtual number
     * Use **virtual-number** to update the tags and/or replyCallbackUrl of a Virtual Number.  This request body will override the original POST/ virtual-numbers call. 
     * @param body  (required)
     * @param contentLanguage  (required)
     * @param accept  (required)
     * @param acceptCharset  (required)
     * @param contentType  (required)
     * @param virtualNumber Write the Virtual Number here, using national format (e.g. 0412345678).  (required)
     * @param telstraApiVersion  (optional)
     * @return ApiResponse&lt;VirtualNumber&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VirtualNumber> updateNumberWithHttpInfo(Object body, String contentLanguage,  String accept, String acceptCharset, String contentType, String virtualNumber, String telstraApiVersion) throws ApiException {
        com.squareup.okhttp.Call call = updateNumberValidateBeforeCall(body, contentLanguage,accept, acceptCharset, contentType, virtualNumber, telstraApiVersion, null, null);
        Type localVarReturnType = new TypeToken<VirtualNumber>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * update a virtual number (asynchronously)
     * Use **virtual-number** to update the tags and/or replyCallbackUrl of a Virtual Number.  This request body will override the original POST/ virtual-numbers call. 
     * @param body  (required)
     * @param contentLanguage  (required)
     * @param accept  (required)
     * @param acceptCharset  (required)
     * @param contentType  (required)
     * @param virtualNumber Write the Virtual Number here, using national format (e.g. 0412345678).  (required)
     * @param telstraApiVersion  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateNumberAsync(Object body, String contentLanguage,  String accept, String acceptCharset, String contentType, String virtualNumber, String telstraApiVersion, final ApiCallback<VirtualNumber> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateNumberValidateBeforeCall(body, contentLanguage, accept, acceptCharset, contentType, virtualNumber, telstraApiVersion, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VirtualNumber>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
