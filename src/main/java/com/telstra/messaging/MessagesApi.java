/*
 * Messaging API v3.1.0
 * Send and receive SMS & MMS programmatically, leveraging Australia's leading mobile network. With Telstra's Messaging API, we take out the complexity to allow seamless messaging integration into your app, with just a few lines of code. Our REST API is enterprise grade, allowing you to communicate with engaging SMS & MMS messaging in your web and mobile apps in near real-time on a global scale. 
 *
 * OpenAPI spec version: 3.1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.telstra.messaging;

import com.telstra.*;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MessagesApi {
    private ApiClient apiClient;

    public MessagesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MessagesApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for deleteMessageById
     * @param contentLanguage  (required)
     * @param accept  (required)
     * @param acceptCharset  (required)
     * @param contentType  (required)
     * @param messageId When you sent the original message, this is the UUID that was returned in the call response. Use this ID to fetch, update or delete a message with the appropriate endpoints.  (required)
     * @param telstraApiVersion  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteMessageByIdCall(String contentLanguage, String accept, String acceptCharset, String contentType, UUID messageId, String telstraApiVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/messages/{messageId}"
            .replaceAll("\\{" + "messageId" + "\\}", apiClient.escapeString(messageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (telstraApiVersion != null)
            localVarHeaderParams.put("Telstra-api-version", apiClient.parameterToString(telstraApiVersion));
        if (contentLanguage != null)
            localVarHeaderParams.put("Content-Language", apiClient.parameterToString(contentLanguage));
        if (accept != null)
            localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));
        if (acceptCharset != null)
            localVarHeaderParams.put("Accept-Charset", apiClient.parameterToString(acceptCharset));
        if (contentType != null)
            localVarHeaderParams.put("Content-Type", apiClient.parameterToString(contentType));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearer_auth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    

    private com.squareup.okhttp.Call deleteMessageByIdValidateBeforeCall(String contentLanguage, String accept, String acceptCharset, String contentType, UUID messageId, String telstraApiVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'contentLanguage' is set
        if (contentLanguage == null) {
            throw new ApiException("Missing the required parameter 'contentLanguage' when calling deleteMessageById(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling deleteMessageById(Async)");
        }
        // verify the required parameter 'acceptCharset' is set
        if (acceptCharset == null) {
            throw new ApiException("Missing the required parameter 'acceptCharset' when calling deleteMessageById(Async)");
        }
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling deleteMessageById(Async)");
        }
        // verify the required parameter 'messageId' is set
        if (messageId == null) {
            throw new ApiException("Missing the required parameter 'messageId' when calling deleteMessageById(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteMessageByIdCall(contentLanguage, accept, acceptCharset, contentType, messageId, telstraApiVersion, progressListener, progressRequestListener);
        return call;
        
    }

    /**
     * delete a message
     * Use this endpoint to delete a message that&#x27;s been scheduled for sending, but hasn&#x27;t yet sent.
     * @param messageId When you sent the original message, this is the UUID that was returned in the call response. Use this ID to fetch, update or delete a message with the appropriate endpoints.  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteMessageById(UUID messageId) throws ApiException {
        String contentLanguage ="en-au";
        String accept ="application/json";
        String acceptCharset ="utf-8";
        String contentType ="application/json";
        String telstraApiVersion ="3.1.0";

        deleteMessageByIdWithHttpInfo(contentLanguage, accept, acceptCharset, contentType, messageId, telstraApiVersion);
    }

    /**
     * delete a message
     * Use this endpoint to delete a message that&#x27;s been scheduled for sending, but hasn&#x27;t yet sent. 
     * @param contentLanguage  (required)
     * @param accept  (required)
     * @param acceptCharset  (required)
     * @param contentType  (required)
     * @param messageId When you sent the original message, this is the UUID that was returned in the call response. Use this ID to fetch, update or delete a message with the appropriate endpoints.  (required)
     * @param telstraApiVersion  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteMessageByIdWithHttpInfo(String contentLanguage, String accept, String acceptCharset, String contentType, UUID messageId, String telstraApiVersion) throws ApiException {
        com.squareup.okhttp.Call call = deleteMessageByIdValidateBeforeCall(contentLanguage,  accept, acceptCharset, contentType, messageId, telstraApiVersion, null, null);
        return apiClient.execute(call);
    }

    /**
     * delete a message (asynchronously)
     * Use this endpoint to delete a message that&#x27;s been scheduled for sending, but hasn&#x27;t yet sent. 
     * @param contentLanguage  (required)
     * @param authorization  (required)
     * @param accept  (required)
     * @param acceptCharset  (required)
     * @param contentType  (required)
     * @param messageId When you sent the original message, this is the UUID that was returned in the call response. Use this ID to fetch, update or delete a message with the appropriate endpoints.  (required)
     * @param telstraApiVersion  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteMessageByIdAsync(String contentLanguage, String accept, String acceptCharset, String contentType, UUID messageId, String telstraApiVersion, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteMessageByIdValidateBeforeCall(contentLanguage, accept, acceptCharset, contentType, messageId, telstraApiVersion, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getMessageById
     * @param contentLanguage  (required)
     * @param accept  (required)
     * @param acceptCharset  (required)
     * @param contentType  (required)
     * @param messageId When you sent the original message, this is the UUID that was returned in the response. Use this ID to fetch, update or delete a message with the appropriate endpoints.   Incoming messages are also assigned a messageId. Use this ID with GET/ messages/{messageId} to fetch the message later.  (required)
     * @param telstraApiVersion  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getMessageByIdCall(String contentLanguage, String accept, String acceptCharset, String contentType, UUID messageId, String telstraApiVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/messages/{messageId}"
            .replaceAll("\\{" + "messageId" + "\\}", apiClient.escapeString(messageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (telstraApiVersion != null)
            localVarHeaderParams.put("Telstra-api-version", apiClient.parameterToString(telstraApiVersion));
        if (contentLanguage != null)
            localVarHeaderParams.put("Content-Language", apiClient.parameterToString(contentLanguage));
        if (accept != null)
            localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));
        if (acceptCharset != null)
            localVarHeaderParams.put("Accept-Charset", apiClient.parameterToString(acceptCharset));
        if (contentType != null)
            localVarHeaderParams.put("Content-Type", apiClient.parameterToString(contentType));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
             "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearer_auth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    

    private com.squareup.okhttp.Call getMessageByIdValidateBeforeCall(String contentLanguage, String accept, String acceptCharset, String contentType, UUID messageId, String telstraApiVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'contentLanguage' is set
        if (contentLanguage == null) {
            throw new ApiException("Missing the required parameter 'contentLanguage' when calling getMessageById(Async)");
        }
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling getMessageById(Async)");
        }
        // verify the required parameter 'acceptCharset' is set
        if (acceptCharset == null) {
            throw new ApiException("Missing the required parameter 'acceptCharset' when calling getMessageById(Async)");
        }
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling getMessageById(Async)");
        }
        // verify the required parameter 'messageId' is set
        if (messageId == null) {
            throw new ApiException("Missing the required parameter 'messageId' when calling getMessageById(Async)");
        }
        
        com.squareup.okhttp.Call call = getMessageByIdCall(contentLanguage, accept, acceptCharset, contentType, messageId, telstraApiVersion, progressListener, progressRequestListener);
        return call;
    }

    /**
     * fetch a specific message
     * Use the **messageId** to fetch a message that&#x27;s been sent from/to your account within the last 30 days.
     * @param messageId When you sent the original message, this is the UUID that was returned in the response. Use this ID to fetch, update or delete a message with the appropriate endpoints.   Incoming messages are also assigned a messageId. Use this ID with GET/ messages/{messageId} to fetch the message later.  (required)
     * @return MessageGet
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MessageGet getMessageById(UUID messageId) throws ApiException {
        String contentLanguage ="en-au";
        String accept ="application/json";
        String acceptCharset ="utf-8";
        String contentType ="application/json";
        String telstraApiVersion ="3.1.0";

        ApiResponse<MessageGet> resp = getMessageByIdWithHttpInfo(contentLanguage, accept, acceptCharset, contentType, messageId, telstraApiVersion);
        return resp.getData();
    }

    /**
     * fetch a specific message
     * Use the **messageId** to fetch a message that&#x27;s been sent from/to your account within the last 30 days. 
     * @param contentLanguage  (required)
     * @param accept  (required)
     * @param acceptCharset  (required)
     * @param contentType  (required)
     * @param messageId When you sent the original message, this is the UUID that was returned in the response. Use this ID to fetch, update or delete a message with the appropriate endpoints.   Incoming messages are also assigned a messageId. Use this ID with GET/ messages/{messageId} to fetch the message later.  (required)
     * @param telstraApiVersion  (optional)
     * @return ApiResponse&lt;MessageGet&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MessageGet> getMessageByIdWithHttpInfo(String contentLanguage, String accept, String acceptCharset, String contentType, UUID messageId, String telstraApiVersion) throws ApiException {
        com.squareup.okhttp.Call call = getMessageByIdValidateBeforeCall(contentLanguage, accept, acceptCharset, contentType, messageId, telstraApiVersion, null, null);
        Type localVarReturnType = new TypeToken<MessageGet>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * fetch a specific message (asynchronously)
     * Use the **messageId** to fetch a message that&#x27;s been sent from/to your account within the last 30 days. 
     * @param contentLanguage  (required)
     * @param accept  (required)
     * @param acceptCharset  (required)
     * @param contentType  (required)
     * @param messageId When you sent the original message, this is the UUID that was returned in the response. Use this ID to fetch, update or delete a message with the appropriate endpoints.   Incoming messages are also assigned a messageId. Use this ID with GET/ messages/{messageId} to fetch the message later.  (required)
     * @param telstraApiVersion  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getMessageByIdAsync(String contentLanguage, String accept, String acceptCharset, String contentType, UUID messageId, String telstraApiVersion, final ApiCallback<MessageGet> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getMessageByIdValidateBeforeCall(contentLanguage, accept, acceptCharset, contentType, messageId, telstraApiVersion, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MessageGet>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getMessages
     * @param contentLanguage  (required)
     * @param accept  (required)
     * @param acceptCharset  (required)
     * @param contentType  (required)
     * @param telstraApiVersion  (optional)
     * @param limit Tell us how many results you want us to return, up to a maximum of 50.  (optional, default to 10)
     * @param offset Use the offset to navigate between the response results. An offset of 0 will display the first page of results, and so on.  (optional, default to 0)
     * @param direction Filter your messages by direction: * **outgoing** – messages sent from your account. * **incoming** – messages sent to your account.  (optional)
     * @param status Filter your messages by one of the statuses below:  * **queued** – messages queued for sending or still in transit. * **sent** – messages that have been sent from the server. * **delivered** – messages successful delivered to the recipient&#x27;s device. Note that we will only be able to return this status if you set deliveryNotification to **true** (paid feature).  * **expired** – message that couldn&#x27;t be sent within the **retryTimeout** timeframe.  (optional)
     * @param filter Filter your messages by:  * tag - use one of the tags assigned to your message(s) * number - either the Virtual Number used to send the message, or the Recipient Number the message was sent to.  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getMessagesCall(String contentLanguage, String accept, String acceptCharset, String contentType, String telstraApiVersion, Integer limit, Integer offset, String direction, String status, String filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/messages";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (direction != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("direction", direction));
        if (status != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("status", status));
        if (filter != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (telstraApiVersion != null)
            localVarHeaderParams.put("Telstra-api-version", apiClient.parameterToString(telstraApiVersion));
        if (contentLanguage != null)
            localVarHeaderParams.put("Content-Language", apiClient.parameterToString(contentLanguage));
        if (accept != null)
            localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));
        if (acceptCharset != null)
            localVarHeaderParams.put("Accept-Charset", apiClient.parameterToString(acceptCharset));
        if (contentType != null)
            localVarHeaderParams.put("Content-Type", apiClient.parameterToString(contentType));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearer_auth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    

    private com.squareup.okhttp.Call getMessagesValidateBeforeCall(String contentLanguage, String accept, String acceptCharset, String contentType, String telstraApiVersion, Integer limit, Integer offset, String direction, String status, String filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'contentLanguage' is set
        if (contentLanguage == null) {
            throw new ApiException("Missing the required parameter 'contentLanguage' when calling getMessages(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling getMessages(Async)");
        }
        // verify the required parameter 'acceptCharset' is set
        if (acceptCharset == null) {
            throw new ApiException("Missing the required parameter 'acceptCharset' when calling getMessages(Async)");
        }
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling getMessages(Async)");
        }
        
        com.squareup.okhttp.Call call = getMessagesCall(contentLanguage, accept, acceptCharset, contentType, telstraApiVersion, limit, offset, direction, status, filter, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * fetch all sent/received messages
     * Fetch messages that have been sent from/to your account in the last 30 days.
     * @param limit Tell us how many results you want us to return, up to a maximum of 50.  (optional, default to 10)
     * @param offset Use the offset to navigate between the response results. An offset of 0 will display the first page of results, and so on.  (optional, default to 0)
     * @param direction Filter your messages by direction: * **outgoing** – messages sent from your account. * **incoming** – messages sent to your account.  (optional)
     * @param status Filter your messages by one of the statuses below:  * **queued** – messages queued for sending or still in transit. * **sent** – messages that have been sent from the server. * **delivered** – messages successful delivered to the recipient&#x27;s device. Note that we will only be able to return this status if you set deliveryNotification to **true** (paid feature).  * **expired** – message that couldn&#x27;t be sent within the **retryTimeout** timeframe.  (optional)
     * @param filter Filter your messages by:  * tag - use one of the tags assigned to your message(s) * number - either the Virtual Number used to send the message, or the Recipient Number the message was sent to.  (optional)
     * @return InlineResponse200
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetMessages200Response getMessages(Integer limit, Integer offset, String direction, String status, String filter) throws ApiException {
        String contentLanguage ="en-au";
        String accept ="application/json";
        String acceptCharset ="utf-8";
        String contentType ="application/json";
        String telstraApiVersion ="3.x";

        ApiResponse<GetMessages200Response> resp = getMessagesWithHttpInfo(contentLanguage, accept, acceptCharset, contentType, telstraApiVersion, limit, offset, direction, status, filter);
        return resp.getData();
    }

    /**
     * fetch all sent/received messages
     * Fetch messages that have been sent from/to your account in the last 30 days.
     * @param contentLanguage  (required)
     * @param accept  (required)
     * @param acceptCharset  (required)
     * @param contentType  (required)
     * @param telstraApiVersion  (optional)
     * @param limit Tell us how many results you want us to return, up to a maximum of 50.  (optional, default to 10)
     * @param offset Use the offset to navigate between the response results. An offset of 0 will display the first page of results, and so on.  (optional, default to 0)
     * @param direction Filter your messages by direction: * **outgoing** – messages sent from your account. * **incoming** – messages sent to your account.  (optional)
     * @param status Filter your messages by one of the statuses below:  * **queued** – messages queued for sending or still in transit. * **sent** – messages that have been sent from the server. * **delivered** – messages successful delivered to the recipient&#x27;s device. Note that we will only be able to return this status if you set deliveryNotification to **true** (paid feature).  * **expired** – message that couldn&#x27;t be sent within the **retryTimeout** timeframe.  (optional)
     * @param filter Filter your messages by:  * tag - use one of the tags assigned to your message(s) * number - either the Virtual Number used to send the message, or the Recipient Number the message was sent to.  (optional)
     * @return ApiResponse&lt;InlineResponse200&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetMessages200Response> getMessagesWithHttpInfo(String contentLanguage, String accept, String acceptCharset, String contentType, String telstraApiVersion, Integer limit, Integer offset, String direction, String status, String filter) throws ApiException {
        com.squareup.okhttp.Call call = getMessagesValidateBeforeCall(contentLanguage,accept, acceptCharset, contentType, telstraApiVersion, limit, offset, direction, status, filter, null, null);
        Type localVarReturnType = new TypeToken<GetMessages200Response>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * fetch all sent/received messages (asynchronously)
     * Fetch messages that have been sent from/to your account in the last 30 days.
     * @param contentLanguage  (required)
     * @param accept  (required)
     * @param acceptCharset  (required)
     * @param contentType  (required)
     * @param telstraApiVersion  (optional)
     * @param limit Tell us how many results you want us to return, up to a maximum of 50.  (optional, default to 10)
     * @param offset Use the offset to navigate between the response results. An offset of 0 will display the first page of results, and so on.  (optional, default to 0)
     * @param direction Filter your messages by direction: * **outgoing** – messages sent from your account. * **incoming** – messages sent to your account.  (optional)
     * @param status Filter your messages by one of the statuses below:  * **queued** – messages queued for sending or still in transit. * **sent** – messages that have been sent from the server. * **delivered** – messages successful delivered to the recipient&#x27;s device. Note that we will only be able to return this status if you set deliveryNotification to **true** (paid feature).  * **expired** – message that couldn&#x27;t be sent within the **retryTimeout** timeframe.  (optional)
     * @param filter Filter your messages by:  * tag - use one of the tags assigned to your message(s) * number - either the Virtual Number used to send the message, or the Recipient Number the message was sent to.  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getMessagesAsync(String contentLanguage,  String accept, String acceptCharset, String contentType, String telstraApiVersion, Integer limit, Integer offset, String direction, String status, String filter, final ApiCallback<GetMessages200Response> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getMessagesValidateBeforeCall(contentLanguage, accept, acceptCharset, contentType, telstraApiVersion, limit, offset, direction, status, filter, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetMessages200Response>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for sendMessages
     * @param body  (required)
     * @param contentLanguage  (required)
     * @param accept  (required)
     * @param acceptCharset  (required)
     * @param contentType  (required)
     * @param telstraApiVersion  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call sendMessagesCall(Object body, String contentLanguage, String accept, String acceptCharset, String contentType, String telstraApiVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/messages";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (telstraApiVersion != null)
            localVarHeaderParams.put("Telstra-api-version", apiClient.parameterToString(telstraApiVersion));
        if (contentLanguage != null)
            localVarHeaderParams.put("Content-Language", apiClient.parameterToString(contentLanguage));
        if (accept != null)
            localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));
        if (acceptCharset != null)
            localVarHeaderParams.put("Accept-Charset", apiClient.parameterToString(acceptCharset));
        if (contentType != null)
            localVarHeaderParams.put("Content-Type", apiClient.parameterToString(contentType));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearer_auth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    

    private com.squareup.okhttp.Call sendMessagesValidateBeforeCall(Object body, String contentLanguage, String accept, String acceptCharset, String contentType, String telstraApiVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling sendMessages(Async)");
        }
        // verify the required parameter 'contentLanguage' is set
        if (contentLanguage == null) {
            throw new ApiException("Missing the required parameter 'contentLanguage' when calling sendMessages(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling sendMessages(Async)");
        }
        // verify the required parameter 'acceptCharset' is set
        if (acceptCharset == null) {
            throw new ApiException("Missing the required parameter 'acceptCharset' when calling sendMessages(Async)");
        }
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling sendMessages(Async)");
        }
        
        com.squareup.okhttp.Call call = sendMessagesCall(body, contentLanguage, accept, acceptCharset, contentType, telstraApiVersion, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * send messages
     * Send an SMS/MMS to a mobile number, or to multiple mobile numbers.  Free Trial users can message to up to 10 unique recipient numbers for free. The first five recipients will be automatically added to your Free Trial Numbers list. Need more? Just use the POST /free-trial-numbers call to add another five. 
     * @param sendMessagesRequest  (required)
     * @return MessageSent
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MessageSent sendMessages(SendMessagesRequest sendMessagesRequest) throws ApiException {
        String contentLanguage ="en-au";
        String accept ="application/json";
        String acceptCharset ="utf-8";
        String contentType ="application/json";
        String telstraApiVersion ="3.x";

        ApiResponse<MessageSent> resp = sendMessagesWithHttpInfo(sendMessagesRequest, contentLanguage, accept, acceptCharset, contentType, telstraApiVersion);
        return resp.getData();
    }

    /**
     * send messages
     * Send an SMS/MMS to a mobile number, or to multiple mobile numbers.  Free Trial users can message to up to 10 unique recipient numbers for free. The first five recipients will be automatically added to your Free Trial Numbers list. Need more? Just use the POST /free-trial-numbers call to add another five. 
     * @param body  (required)
     * @param contentLanguage  (required)
     * @param accept  (required)
     * @param acceptCharset  (required)
     * @param contentType  (required)
     * @param telstraApiVersion  (optional)
     * @return ApiResponse&lt;MessageSent&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MessageSent> sendMessagesWithHttpInfo(Object body, String contentLanguage, String accept, String acceptCharset, String contentType, String telstraApiVersion) throws ApiException {
        com.squareup.okhttp.Call call = sendMessagesValidateBeforeCall(body, contentLanguage, accept, acceptCharset, contentType, telstraApiVersion, null, null);
        Type localVarReturnType = new TypeToken<MessageSent>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * send messages (asynchronously)
     * Send an SMS/MMS to a mobile number, or to multiple mobile numbers.  Free Trial users can message to up to 10 unique recipient numbers for free. The first five recipients will be automatically added to your Free Trial Numbers list. Need more? Just use the POST /free-trial-numbers call to add another five. 
     * @param body  (required)
     * @param contentLanguage  (required)
     * @param accept  (required)
     * @param acceptCharset  (required)
     * @param contentType  (required)
     * @param telstraApiVersion  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call sendMessagesAsync(Object body, String contentLanguage,  String accept, String acceptCharset, String contentType, String telstraApiVersion, final ApiCallback<MessageSent> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = sendMessagesValidateBeforeCall(body, contentLanguage, accept, acceptCharset, contentType, telstraApiVersion, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MessageSent>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateMessageById
     * @param body  (required)
     * @param contentLanguage  (required)
     * @param accept  (required)
     * @param acceptCharset  (required)
     * @param contentType  (required)
     * @param messageId When you sent the original message, this is the UUID that was returned in the call response. Use this ID to fetch, update or delete a message with the appropriate endpoints.  (required)
     * @param telstraApiVersion  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateMessageByIdCall(Object body, String contentLanguage,  String accept, String acceptCharset, String contentType, UUID messageId, String telstraApiVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/messages/{messageId}"
            .replaceAll("\\{" + "messageId" + "\\}", apiClient.escapeString(messageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (telstraApiVersion != null)
            localVarHeaderParams.put("Telstra-api-version", apiClient.parameterToString(telstraApiVersion));
        if (contentLanguage != null)
            localVarHeaderParams.put("Content-Language", apiClient.parameterToString(contentLanguage));
        if (accept != null)
            localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));
        if (acceptCharset != null)
            localVarHeaderParams.put("Accept-Charset", apiClient.parameterToString(acceptCharset));
        if (contentType != null)
            localVarHeaderParams.put("Content-Type", apiClient.parameterToString(contentType));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearer_auth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    private com.squareup.okhttp.Call updateMessageByIdValidateBeforeCall(Object body, String contentLanguage, String accept, String acceptCharset, String contentType, UUID messageId, String telstraApiVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateMessageById(Async)");
        }
        // verify the required parameter 'contentLanguage' is set
        if (contentLanguage == null) {
            throw new ApiException("Missing the required parameter 'contentLanguage' when calling updateMessageById(Async)");
        }
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling updateMessageById(Async)");
        }
        // verify the required parameter 'acceptCharset' is set
        if (acceptCharset == null) {
            throw new ApiException("Missing the required parameter 'acceptCharset' when calling updateMessageById(Async)");
        }
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling updateMessageById(Async)");
        }
        // verify the required parameter 'messageId' is set
        if (messageId == null) {
            throw new ApiException("Missing the required parameter 'messageId' when calling updateMessageById(Async)");
        }
        
        com.squareup.okhttp.Call call = updateMessageByIdCall(body, contentLanguage, accept, acceptCharset, contentType, messageId, telstraApiVersion, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * update a message
     * Need to update a message that&#x27;s scheduled for sending? You can change any of the below parameters, as long as the message hasn&#x27;t been sent yet. This request body will override the original POST/ messages call. 
     * @param updateMessageByIdRequest  (required)
     * @param messageId When you sent the original message, this is the UUID that was returned in the call response. Use this ID to fetch, update or delete a message with the appropriate endpoints.  (required)*
     * @return MessageUpdate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MessageUpdate updateMessageById(UpdateMessageByIdRequest updateMessageByIdRequest, UUID messageId) throws ApiException {
        String contentLanguage ="en-au";
        String accept ="application/json";
        String acceptCharset ="utf-8";
        String contentType ="application/json";
        String telstraApiVersion ="3.x";

        ApiResponse<MessageUpdate> resp = updateMessageByIdWithHttpInfo(updateMessageByIdRequest, contentLanguage, accept, acceptCharset, contentType, messageId, telstraApiVersion);
        return resp.getData();
    }

    /**
     * update a message
     * Need to update a message that&#x27;s scheduled for sending? You can change any of the below parameters, as long as the message hasn&#x27;t been sent yet. This request body will override the original POST/ messages call. 
     * @param body  (required)
     * @param contentLanguage  (required)
     * @param accept  (required)
     * @param acceptCharset  (required)
     * @param contentType  (required)
     * @param messageId When you sent the original message, this is the UUID that was returned in the call response. Use this ID to fetch, update or delete a message with the appropriate endpoints.  (required)
     * @param telstraApiVersion  (optional)
     * @return ApiResponse&lt;MessageUpdate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MessageUpdate> updateMessageByIdWithHttpInfo(Object body, String contentLanguage, String accept, String acceptCharset, String contentType, UUID messageId, String telstraApiVersion) throws ApiException {
        com.squareup.okhttp.Call call = updateMessageByIdValidateBeforeCall(body, contentLanguage, accept, acceptCharset, contentType, messageId, telstraApiVersion, null, null);
        Type localVarReturnType = new TypeToken<MessageUpdate>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * update a message (asynchronously)
     * Need to update a message that&#x27;s scheduled for sending? You can change any of the below parameters, as long as the message hasn&#x27;t been sent yet. This request body will override the original POST/ messages call. 
     * @param body  (required)
     * @param contentLanguage  (required)
     * @param accept  (required)
     * @param acceptCharset  (required)
     * @param contentType  (required)
     * @param messageId When you sent the original message, this is the UUID that was returned in the call response. Use this ID to fetch, update or delete a message with the appropriate endpoints.  (required)
     * @param telstraApiVersion  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateMessageByIdAsync(Object body, String contentLanguage,  String accept, String acceptCharset, String contentType, UUID messageId, String telstraApiVersion, final ApiCallback<MessageUpdate> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateMessageByIdValidateBeforeCall(body, contentLanguage, accept, acceptCharset, contentType, messageId, telstraApiVersion, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MessageUpdate>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateMessageTags
     * @param body  (required)
     * @param contentLanguage  (required)
     * @param accept  (required)
     * @param acceptCharset  (required)
     * @param contentType  (required)
     * @param messageId When you sent the original message, this is the UUID that was returned in the call response. Use this ID to fetch, update or delete a message with the appropriate endpoints.  (required)
     * @param telstraApiVersion  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateMessageTagsCall(Object body, String contentLanguage,  String accept, String acceptCharset, String contentType, UUID messageId, String telstraApiVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/messages/{messageId}"
            .replaceAll("\\{" + "messageId" + "\\}", apiClient.escapeString(messageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (telstraApiVersion != null)
            localVarHeaderParams.put("Telstra-api-version", apiClient.parameterToString(telstraApiVersion));
        if (contentLanguage != null)
            localVarHeaderParams.put("Content-Language", apiClient.parameterToString(contentLanguage));
        if (accept != null)
            localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));
        if (acceptCharset != null)
            localVarHeaderParams.put("Accept-Charset", apiClient.parameterToString(acceptCharset));
        if (contentType != null)
            localVarHeaderParams.put("Content-Type", apiClient.parameterToString(contentType));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearer_auth" };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    

    private com.squareup.okhttp.Call updateMessageTagsValidateBeforeCall(Object body, String contentLanguage, String accept, String acceptCharset, String contentType, UUID messageId, String telstraApiVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateMessageTags(Async)");
        }
        // verify the required parameter 'contentLanguage' is set
        if (contentLanguage == null) {
            throw new ApiException("Missing the required parameter 'contentLanguage' when calling updateMessageTags(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling updateMessageTags(Async)");
        }
        // verify the required parameter 'acceptCharset' is set
        if (acceptCharset == null) {
            throw new ApiException("Missing the required parameter 'acceptCharset' when calling updateMessageTags(Async)");
        }
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling updateMessageTags(Async)");
        }
        // verify the required parameter 'messageId' is set
        if (messageId == null) {
            throw new ApiException("Missing the required parameter 'messageId' when calling updateMessageTags(Async)");
        }
        
        com.squareup.okhttp.Call call = updateMessageTagsCall(body, contentLanguage,accept, acceptCharset, contentType, messageId, telstraApiVersion, progressListener, progressRequestListener);
        return call;
        
    }

    /**
     * update message tags
     * Use the **messageId** to update the tag(s) assigned to a message. You can use this endpoint any time, even after your message has been delivered. 
     * @param updateMessageTagsRequest  (required)
     * @param messageId When you sent the original message, this is the UUID that was returned in the call response. Use this ID to fetch, update or delete a message with the appropriate endpoints.  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateMessageTags(UpdateMessageTagsRequest updateMessageTagsRequest, UUID messageId) throws ApiException {
        String contentLanguage ="en-au";
        String accept ="application/json";
        String acceptCharset ="utf-8";
        String contentType ="application/json";
        String telstraApiVersion ="3.1.0";
        updateMessageTagsWithHttpInfo(updateMessageTagsRequest, contentLanguage, accept, acceptCharset, contentType, messageId, telstraApiVersion);
    }

    /**
     * update message tags
     * Use the **messageId** to update the tag(s) assigned to a message. You can use this endpoint any time, even after your message has been delivered. 
     * @param body  (required)
     * @param contentLanguage  (required)
     * @param accept  (required)
     * @param acceptCharset  (required)
     * @param contentType  (required)
     * @param messageId When you sent the original message, this is the UUID that was returned in the call response. Use this ID to fetch, update or delete a message with the appropriate endpoints.  (required)
     * @param telstraApiVersion  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateMessageTagsWithHttpInfo(Object body, String contentLanguage, String accept, String acceptCharset, String contentType, UUID messageId, String telstraApiVersion) throws ApiException {
        com.squareup.okhttp.Call call = updateMessageTagsValidateBeforeCall(body, contentLanguage, accept, acceptCharset, contentType, messageId, telstraApiVersion, null, null);
        return apiClient.execute(call);
    }

    /**
     * update message tags (asynchronously)
     * Use the **messageId** to update the tag(s) assigned to a message. You can use this endpoint any time, even after your message has been delivered. 
     * @param body  (required)
     * @param contentLanguage  (required)
     * @param accept  (required)
     * @param acceptCharset  (required)
     * @param contentType  (required)
     * @param messageId When you sent the original message, this is the UUID that was returned in the call response. Use this ID to fetch, update or delete a message with the appropriate endpoints.  (required)
     * @param telstraApiVersion  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateMessageTagsAsync(Object body, String contentLanguage,  String accept, String acceptCharset, String contentType, UUID messageId, String telstraApiVersion, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateMessageTagsValidateBeforeCall(body, contentLanguage, accept, acceptCharset, contentType, messageId, telstraApiVersion, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
