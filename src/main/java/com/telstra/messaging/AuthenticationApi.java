/*
 * Messaging API v3.1.0
 * Send and receive SMS & MMS programmatically, leveraging Australia's leading mobile network. With Telstra's Messaging API, we take out the complexity to allow seamless messaging integration into your app, with just a few lines of code. Our REST API is enterprise grade, allowing you to communicate with engaging SMS & MMS messaging in your web and mobile apps in near real-time on a global scale. 
 *
 * OpenAPI spec version: 3.1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.telstra.messaging;

import com.telstra.ApiCallback;
import com.telstra.ApiClient;
import com.telstra.ApiException;
import com.telstra.ApiResponse;
import com.telstra.Configuration;
import com.telstra.Pair;
import com.telstra.ProgressRequestBody;
import com.telstra.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.telstra.OAuth;


import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AuthenticationApi {
    private ApiClient apiClient;

    public AuthenticationApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AuthenticationApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public static ApiClient getAuthToken(ApiClient apiClient) {
        
        apiClient.setBasePath("https://products.api.telstra.com/v2");
 
        AuthenticationApi authenticationApi = new AuthenticationApi(apiClient);
        try {
            OAuth oAuthResponse = authenticationApi.authToken(apiClient.getClientId(), apiClient.getClientSecret(), apiClient.getGrantType(), apiClient.getScope());
            apiClient.setAccessToken(oAuthResponse.getAccessToken());
            return apiClient;            
        } catch (ApiException e) {
            System.err.println("Exception when calling AuthenticationApi#authToken");
            System.err.println("Status code: " + e.getCode());
            System.err.println("Reason: " + e.getResponseBody());
            System.err.println("Response headers: " + e.getResponseHeaders());
            e.printStackTrace();
        } finally {
            apiClient.setBasePath("https://products.api.telstra.com/messaging/v3");
        }

        return null;
    }


    /**
     * Build call for authToken
     * @param clientId  (required)
     * @param clientSecret  (required)
     * @param grantType  (required)
     * @param scope  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call authTokenCall(String clientId, String clientSecret, String grantType, String scope, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/oauth/token";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (clientId != null)
            localVarFormParams.put("client_id", clientId);
        if (clientSecret != null)
            localVarFormParams.put("client_secret", clientSecret);
        if (grantType != null)
            localVarFormParams.put("grant_type", grantType);
        if (scope != null)
            localVarFormParams.put("scope", scope);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearer_auth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call authTokenValidateBeforeCall(String clientId, String clientSecret, String grantType, String scope, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling authToken(Async)");
        }
        // verify the required parameter 'clientSecret' is set
        if (clientSecret == null) {
            throw new ApiException("Missing the required parameter 'clientSecret' when calling authToken(Async)");
        }
        // verify the required parameter 'grantType' is set
        if (grantType == null) {
            throw new ApiException("Missing the required parameter 'grantType' when calling authToken(Async)");
        }
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling authToken(Async)");
        }
        
        okhttp3.Call call = authTokenCall(clientId, clientSecret, grantType, scope, progressListener, progressRequestListener);
        return call;
    }

    /**
     * Generate an access token
     * An OAuth 2.0 access token is required to access the API features. To create a token, use the unique &#x60;client_id&#x60; and &#x60;client_secret&#x60; you received when you registered for the API. You can find these credentials [here](https://dev.telstra.com). Note that your access token will expire in 1 hour. 
     * @param clientId  (required)
     * @param clientSecret  (required)
     * @param grantType  (required)
     * @param scope  (required)
     * @return OAuth
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OAuth authToken(String clientId, String clientSecret, String grantType, String scope) throws ApiException {
        ApiResponse<OAuth> resp = authTokenWithHttpInfo(clientId, clientSecret, grantType, scope);
        return resp.getData();
    }

    /**
     * Generate an access token
     * An OAuth 2.0 access token is required to access the API features. To create a token, use the unique &#x60;client_id&#x60; and &#x60;client_secret&#x60; you received when you registered for the API. You can find these credentials [here](https://dev.telstra.com). Note that your access token will expire in 1 hour. 
     * @param clientId  (required)
     * @param clientSecret  (required)
     * @param grantType  (required)
     * @param scope  (required)
     * @return ApiResponse&lt;OAuth&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OAuth> authTokenWithHttpInfo(String clientId, String clientSecret, String grantType, String scope) throws ApiException {
        okhttp3.Call call = authTokenValidateBeforeCall(clientId, clientSecret, grantType, scope, null, null);
        Type localVarReturnType = new TypeToken<OAuth>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Generate an access token (asynchronously)
     * An OAuth 2.0 access token is required to access the API features. To create a token, use the unique &#x60;client_id&#x60; and &#x60;client_secret&#x60; you received when you registered for the API. You can find these credentials [here](https://dev.telstra.com). Note that your access token will expire in 1 hour. 
     * @param clientId  (required)
     * @param clientSecret  (required)
     * @param grantType  (required)
     * @param scope  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call authTokenAsync(String clientId, String clientSecret, String grantType, String scope, final ApiCallback<OAuth> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = authTokenValidateBeforeCall(clientId, clientSecret, grantType, scope, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OAuth>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
