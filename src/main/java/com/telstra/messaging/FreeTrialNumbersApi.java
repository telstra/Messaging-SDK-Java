/*
 * Messaging API v3.1.0
 * Send and receive SMS & MMS programmatically, leveraging Australia's leading mobile network. With Telstra's Messaging API, we take out the complexity to allow seamless messaging integration into your app, with just a few lines of code. Our REST API is enterprise grade, allowing you to communicate with engaging SMS & MMS messaging in your web and mobile apps in near real-time on a global scale. 
 *
 * OpenAPI spec version: 3.1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.telstra.messaging;

import com.telstra.*;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class FreeTrialNumbersApi {
    private ApiClient apiClient;

    public FreeTrialNumbersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public FreeTrialNumbersApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createTrialNumbers
     * @param body  (required)
     * @param contentLanguage  (required)
     * @param accept  (required)
     * @param acceptCharset  (required)
     * @param contentType  (required)
     * @param telstraApiVersion  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call createTrialNumbersCall(Object body, String contentLanguage, String accept, String acceptCharset, String contentType, String telstraApiVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/free-trial-numbers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (telstraApiVersion != null)
            localVarHeaderParams.put("Telstra-api-version", apiClient.parameterToString(telstraApiVersion));
        if (contentLanguage != null)
            localVarHeaderParams.put("Content-Language", apiClient.parameterToString(contentLanguage));
        if (accept != null)
            localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));
        if (acceptCharset != null)
            localVarHeaderParams.put("Accept-Charset", apiClient.parameterToString(acceptCharset));
        if (contentType != null)
            localVarHeaderParams.put("Content-Type", apiClient.parameterToString(contentType));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearer_auth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call createTrialNumbersValidateBeforeCall(Object body, String contentLanguage, String accept, String acceptCharset, String contentType, String telstraApiVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createTrialNumbers(Async)");
        }
        // verify the required parameter 'contentLanguage' is set
        if (contentLanguage == null) {
            throw new ApiException("Missing the required parameter 'contentLanguage' when calling createTrialNumbers(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling createTrialNumbers(Async)");
        }
        // verify the required parameter 'acceptCharset' is set
        if (acceptCharset == null) {
            throw new ApiException("Missing the required parameter 'acceptCharset' when calling createTrialNumbers(Async)");
        }
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling createTrialNumbers(Async)");
        }
        
        okhttp3.Call call = createTrialNumbersCall(body, contentLanguage, accept, acceptCharset, contentType, telstraApiVersion, progressListener, progressRequestListener);
        return call;
    }

    /**
     * create free trial number list
     * Your Free Trial Numbers are the 10 recipient mobile numbers that you can message during the Free Trial. The first five numbers you send an SMS/MMS to will automatically be added to your Free Trial Numbers list. After that, you can use this endpoint to register another five. Alternatively, you can use this endpoint to register all 10 numbers.    Use this endpoint to register a Free Trial Number to your account. To test out all the features that the trial has to offer, we recommend registering your own mobile number to your Free Trial Numbers list.   Note that you can only message mobile numbers that have been added to your Free Trial list and once registered, a Free Trial Number cannot be removed or replaced. 
     * @param createTrialNumbersRequest  (required)
     * @return FreeTrialNumbers
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FreeTrialNumbers createTrialNumbers(CreateTrialNumbersRequest createTrialNumbersRequest) throws ApiException {
        String contentLanguage ="en-au";
        String accept ="application/json";
        String acceptCharset ="utf-8";
        String contentType ="application/json";
        String telstraApiVersion ="3.x";
        ApiResponse<FreeTrialNumbers> resp = createTrialNumbersWithHttpInfo(createTrialNumbersRequest, contentLanguage, accept, acceptCharset, contentType, telstraApiVersion);
        return resp.getData();
    }

    /**
     * create free trial number list
     * Your Free Trial Numbers are the 10 recipient mobile numbers that you can message during the Free Trial. The first five numbers you send an SMS/MMS to will automatically be added to your Free Trial Numbers list. After that, you can use this endpoint to register another five. Alternatively, you can use this endpoint to register all 10 numbers.    Use this endpoint to register a Free Trial Number to your account. To test out all the features that the trial has to offer, we recommend registering your own mobile number to your Free Trial Numbers list.   Note that you can only message mobile numbers that have been added to your Free Trial list and once registered, a Free Trial Number cannot be removed or replaced. 
     * @param body  (required)
     * @param contentLanguage  (required)
     * @param accept  (required)
     * @param acceptCharset  (required)
     * @param contentType  (required)
     * @param telstraApiVersion  (optional)
     * @return ApiResponse&lt;FreeTrialNumbers&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FreeTrialNumbers> createTrialNumbersWithHttpInfo(Object body, String contentLanguage, String accept, String acceptCharset, String contentType, String telstraApiVersion) throws ApiException {
        okhttp3.Call call = createTrialNumbersValidateBeforeCall(body, contentLanguage, accept, acceptCharset, contentType, telstraApiVersion, null, null);
        Type localVarReturnType = new TypeToken<FreeTrialNumbers>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * create free trial number list (asynchronously)
     * Your Free Trial Numbers are the 10 recipient mobile numbers that you can message during the Free Trial. The first five numbers you send an SMS/MMS to will automatically be added to your Free Trial Numbers list. After that, you can use this endpoint to register another five. Alternatively, you can use this endpoint to register all 10 numbers.    Use this endpoint to register a Free Trial Number to your account. To test out all the features that the trial has to offer, we recommend registering your own mobile number to your Free Trial Numbers list.   Note that you can only message mobile numbers that have been added to your Free Trial list and once registered, a Free Trial Number cannot be removed or replaced. 
     * @param body  (required)
     * @param contentLanguage  (required)
     * @param authorization  (required)
     * @param accept  (required)
     * @param acceptCharset  (required)
     * @param contentType  (required)
     * @param telstraApiVersion  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call createTrialNumbersAsync(Object body, String contentLanguage, String authorization, String accept, String acceptCharset, String contentType, String telstraApiVersion, final ApiCallback<FreeTrialNumbers> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = createTrialNumbersValidateBeforeCall(body, contentLanguage, accept, acceptCharset, contentType, telstraApiVersion, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FreeTrialNumbers>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTrialNumbers
     * @param contentLanguage  (required)
     * @param accept  (required)
     * @param acceptCharset  (required)
     * @param contentType  (required)
     * @param telstraApiVersion  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call getTrialNumbersCall(String contentLanguage, String accept, String acceptCharset, String contentType, String telstraApiVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/free-trial-numbers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (telstraApiVersion != null)
            localVarHeaderParams.put("Telstra-api-version", apiClient.parameterToString(telstraApiVersion));
        if (contentLanguage != null)
            localVarHeaderParams.put("Content-Language", apiClient.parameterToString(contentLanguage));
        if (accept != null)
            localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));
        if (acceptCharset != null)
            localVarHeaderParams.put("Accept-Charset", apiClient.parameterToString(acceptCharset));
        if (contentType != null)
            localVarHeaderParams.put("Content-Type", apiClient.parameterToString(contentType));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearer_auth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTrialNumbersValidateBeforeCall(String contentLanguage, String accept, String acceptCharset, String contentType, String telstraApiVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'contentLanguage' is set
        if (contentLanguage == null) {
            throw new ApiException("Missing the required parameter 'contentLanguage' when calling getTrialNumbers(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling getTrialNumbers(Async)");
        }
        // verify the required parameter 'acceptCharset' is set
        if (acceptCharset == null) {
            throw new ApiException("Missing the required parameter 'acceptCharset' when calling getTrialNumbers(Async)");
        }
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling getTrialNumbers(Async)");
        }
        
        okhttp3.Call call = getTrialNumbersCall(contentLanguage, accept, acceptCharset, contentType, telstraApiVersion, progressListener, progressRequestListener);
        return call;
    }

    /**
     * get all free trial numbers
     * Use this endpoint to fetch the Free Trial Number(s) currently assigned to your account. These are the mobile numbers that you can message during the Free Trial.  If you&#x27;re using a paid plan, there&#x27;s no limit to the number of recipients that you can message, so you don&#x27;t need to register Free Trial Numbers.
     * @return FreeTrialNumbers
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FreeTrialNumbers getTrialNumbers() throws ApiException {
        String contentLanguage ="en-au";
        String accept ="application/json";
        String acceptCharset ="utf-8";
        String contentType ="application/json";
        String telstraApiVersion ="3.x";

        ApiResponse<FreeTrialNumbers> resp = getTrialNumbersWithHttpInfo(contentLanguage, accept, acceptCharset, contentType, telstraApiVersion);
        return resp.getData();
    }

    /**
     * get all free trial numbers
     * Use this endpoint to fetch the Free Trial Number(s) currently assigned to your account. These are the mobile numbers that you can message during the Free Trial.  If you&#x27;re using a paid plan, there&#x27;s no limit to the number of recipients that you can message, so you don&#x27;t need to register Free Trial Numbers. 
     * @param contentLanguage  (required)
     * @param accept  (required)
     * @param acceptCharset  (required)
     * @param contentType  (required)
     * @param telstraApiVersion  (optional)
     * @return ApiResponse&lt;FreeTrialNumbers&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FreeTrialNumbers> getTrialNumbersWithHttpInfo(String contentLanguage, String accept, String acceptCharset, String contentType, String telstraApiVersion) throws ApiException {
        okhttp3.Call call = getTrialNumbersValidateBeforeCall(contentLanguage, accept, acceptCharset, contentType, telstraApiVersion, null, null);
        Type localVarReturnType = new TypeToken<FreeTrialNumbers>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * get all free trial numbers (asynchronously)
     * Use this endpoint to fetch the Free Trial Number(s) currently assigned to your account. These are the mobile numbers that you can message during the Free Trial.  If you&#x27;re using a paid plan, there&#x27;s no limit to the number of recipients that you can message, so you don&#x27;t need to register Free Trial Numbers. 
     * @param contentLanguage  (required)
     * @param authorization  (required)
     * @param accept  (required)
     * @param acceptCharset  (required)
     * @param contentType  (required)
     * @param telstraApiVersion  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call getTrialNumbersAsync(String contentLanguage, String authorization, String accept, String acceptCharset, String contentType, String telstraApiVersion, final ApiCallback<FreeTrialNumbers> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = getTrialNumbersValidateBeforeCall(contentLanguage, accept, acceptCharset, contentType, telstraApiVersion, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FreeTrialNumbers>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
